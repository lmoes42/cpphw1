If I want to take the output from some program or command
and plug it into another command I would generally use a pipe.
And example of this that I use a lot would be
 find **/*.pdf | sed 's/\(.*.pdf\)/& pdfs\/\1/g' | xargs -n 2 cp
The first command gives a list of all pdfs in subdirectories, for instance
when I run this in my c++ fundamentals folder I get
  cplusplus.pdf
  cppannotations/latex/cplusplus.pdf pdfs/latex/cplusplus.pdf
  cppannotations/latex/cplusplusus.pdf pdfs/latex/cplusplusus.pdf
This input we then pass into sed, where we look for word
characters followed by a .pdf, then we print the whole name of the file,
and ~/Documents/pdfs/[Name of the file], so we obtain
  cplusplus.pdf pdfs/cplusplus.pdf
  cppannotations/latex/cplusplus.pdf pdfs/cppannotations/latex/cplusplus.pdf
  cppannotations/latex/cplusplusus.pdf pdfs/cppannotations/latex/cplusplusus.pdf
Now we put this into xargs with two inputs as an option, this
will create 3 sets of two commands, then we put these
commands in cp (copy), what this does is it copies all the
PDF files in my C++ Fundamentals directory and copies them to my
~/Documents/pdfs folder.
  As for the example in the exercise, less is meant for reading
(not editing!) files, so it takes whatever input it gets and
displays it in a nice way, for instance if we do seq 10 | less
we get 10 lines with one number on each where we can move
around using vi keybinds.

As for redirection, say we have a program which takes
two inputs and gives us their sum. Then I would test this program
as follows
  $ echo 42 24 > 1.in
  $ ./a.out < 1.in
The first line writes "42 24" to a file 1.in,
the second gives the contents of this file as an input to a.out.
  To explain the example we could for instance write
    echo 10 > 1.in
and then we can type the following
  xargs seq < 1.in > 1.out
What this does is it inputs 1.in into seq (the xargs is required because I
don't think seq takes standard in) and then puts the output into
a file 1.out, indeed when we type cat 1.out we get the numbers
1 through 10 printed.
